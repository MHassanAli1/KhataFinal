generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Will be swapped to postgres in your sync script
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String // hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  userID      Int
  user        User      @relation(fields: [userID], references: [id], onDelete: Cascade)
  activeBookId Int
  activeBook   ActiveBook      @relation(fields: [activeBookId], references: [id], onDelete: Cascade)
  ZoneName    String
  KhdaName    String
  KulAmdan    BigInt
  date        DateTime
  KulAkhrajat BigInt
  SaafiAmdan  BigInt
  Exercise    BigInt
  KulMaizan   BigInt
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Synced      Boolean   @default(false)
  SyncedAt    DateTime?

  trollies Trolly[]
  akhrajat Akhrajat[]
}
model Trolly {
  id          Int      @id @default(autoincrement())
  total       Int
  bookNumber  Int
  StartingNum BigInt
  EndingNum   BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  activeBookId Int
  activeBook ActiveBook @relation(fields: [activeBookId], references: [id], onDelete: Cascade)

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Akhrajat {
  id             Int           @id @default(autoincrement())
  title          String
  description    String? // nullable if “Other”
  amount         BigInt
  date           DateTime // NEW: date when the expense was made
  isGari         Boolean?      @default(false)
  isOther        Boolean?      @default(false)
  othersTitlesId Int?
  othersTitles   OthersTitles? @relation(fields: [othersTitlesId], references: [id])

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  gariExpense GariExpense[]
}

model OthersTitles {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  akhrajat Akhrajat[]
}

model GariExpense {
  Id         Int      @id @default(autoincrement())
  title      String
  quantity   Int?
  part       String?
  akhrajatId Int
  akhrajat   Akhrajat @relation(fields: [akhrajatId], references: [id], onDelete: Cascade)
}

model ActiveBook {
  id          Int     @id @default(autoincrement())
  bookNumber  Int
  zoneName    String
  khdaName    String
  isActive    Boolean @default(true)
  usedTickets Int     @default(0)
  maxTickets Int     @default(100)

  transactions Transaction[]
  trollies Trolly[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

//For Admin Panel
model Zone {
  id    Int    @id @default(autoincrement())
  name  String @unique
  khdas Khda[]
}

model Khda {
  id     Int    @id @default(autoincrement())
  name   String
  zone   Zone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId Int
}

model AkhrajatTitle {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  isGari Boolean @default(false)
}

model DeletedTransaction {
  id            Int      @id @default(autoincrement())
  transactionId Int      @unique
  deletedAt     DateTime @default(now())
}

model GariTitle {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model GariExpenseTypeTitle {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model GariParts {
  id   Int    @id @default(autoincrement())
  name String @unique
}
